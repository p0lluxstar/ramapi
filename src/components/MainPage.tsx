'use client';

import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import { IDetailsCharacter } from '@/types/interfaces';
import Head from 'next/head';
import Header from '@/components/Header';
import MainContent from '@/components/MainContent';
import Loader from './Loader';
import { useDispatch } from 'react-redux';
import { toggleVisibleBlackout } from '@/redux/slices/visibleBlackoutSlice';

interface IProps {
  characters: IDetailsCharacter[];
  detailsCharacter: IDetailsCharacter;
}

export default function MainPage({
  characters,
  detailsCharacter,
}: IProps): JSX.Element {
  const [inputValue, setInputValue] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const router = useRouter();
  const dispatch = useDispatch();

  useEffect(() => {
    setLoading(false);
  }, [characters, detailsCharacter]);

  const fetchSearchData = (): void => {
    if (inputValue) {
      router.replace(`/?name=${inputValue}`);
    }
    setLoading(true);
  };

  const handleInputChange = (inputValue: string): void => {
    setInputValue(inputValue);
  };

  const handleClearInput = (): void => {
    setInputValue('');
    router.replace(`/?page=1`);
    setLoading(true);
  };

  const handleCloseDetails = (): void => {
    const currentParams = new URLSearchParams(window.location.search);
    currentParams.delete('details');
    router.replace(`/?${currentParams.toString()}`, {
      scroll: false,
    });
    dispatch(toggleVisibleBlackout());
  };

  const handleCardClick = async (id: number): Promise<void> => {
    const currentParams = new URLSearchParams(window.location.search);

    if (currentParams.get('details') === id.toString()) {
      return;
    }
    currentParams.set('details', id.toString());
    router.replace(`/?${currentParams.toString()}`, {
      scroll: false,
    });
    setLoading(true);
    dispatch(toggleVisibleBlackout());
  };

  const handlePaginationClick = (): void => {
    setLoading(true);
  };

  return (
    <>
      {loading && <Loader />}
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header
          fetchSearchData={fetchSearchData}
          onInputChange={handleInputChange}
          inputValue={inputValue}
          onClearInput={handleClearInput}
        />
        <MainContent
          characters={characters}
          handleCardClick={handleCardClick}
          detailsCharacter={detailsCharacter}
          handleCloseDetails={handleCloseDetails}
          handlePaginationClick={handlePaginationClick}
        />
      </main>
    </>
  );
}
